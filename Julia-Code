using LinearAlgebra

function optimal_rk_coeffs(order::Int)
    A = zeros(order, order)
    b = zeros(order)
    c = zeros(order)

    # First-order method
    c[1] = 0.0
    b[1] = 1.0

    # Second-order method
    if order >= 2
        c[2] = 1/2
        A[2, 1] = 1/2
        b[2] = 1/2
    end

    # Third-order method
    if order >= 3
        c[3] = 2/3
        A[2, 1] = 1/4
        A[3, 1:2] = [3/4, 1/4]
        b[3] = 1/6
    end

    # Fourth-order method
    if order >= 4
        c[4] = 1/2
        A[2, 1] = 1/3
        A[3, 1:2] = [-1/3, 1]
        A[4, 1:3] = [1, -1, 1]
        b[4] = 1/4
    end

    # Fifth-order method
    if order >= 5
        c[5] = 3/5
        A[2, 1] = 35/384
        A[3, 1:2] = [0, 500/1113]
        A[4, 1:3] = [0, 125/192, -2187/6784]
        A[5, 1:4] = [0, 11/84, 0, 0.25]
        b[5] = 0
    end

    # Sixth-order method
    if order == 6
        c[6] = 1/2
        A[2, 1] = 0.25
        A[3, 1:2] = [0, 3/4]
        A[4, 1:3] = [0.5, -1.5, 2]
        A[5, 1:4] = [-1.5, 2.5, -3, 1.5]
        A[6, 1:5] = [35/384, 0, 500/1113, 125/192, -2187/6784]
        b[6] = 0
    end

    return A, b, c
end

function optimal_rk_step(f, t, y, h, order::Int)
    A, b, c = optimal_rk_coeffs(order)

    k = zeros(length(y), order)
    for j = 1:order
        tj = t + c[j]*h
        yj = y + h*sum(A[j,1:j-1].*k[:,1:j-1], dims=2)
        k[:,j] = f(tj, yj)
    end

    ynew = y + h*sum(b.*k, dims=2)

    return ynew
end
